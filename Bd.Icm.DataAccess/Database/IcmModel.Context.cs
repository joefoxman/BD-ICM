//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bd.Icm.DataAccess.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BdIcmEntities : DbContext
    {
        public BdIcmEntities()
            : base("name=BdIcmEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<InstrumentVersion> InstrumentVersions { get; set; }
        public virtual DbSet<PartActionVersion> PartActionVersions { get; set; }
        public virtual DbSet<PartMetadataVersion> PartMetadataVersions { get; set; }
        public virtual DbSet<PartVersion> PartVersions { get; set; }
        public virtual DbSet<DbVersion> DbVersions { get; set; }
        public virtual DbSet<InstrumentCommit> InstrumentCommits { get; set; }
        public virtual DbSet<Instrument> Instruments { get; set; }
        public virtual DbSet<Part> Parts { get; set; }
        public virtual DbSet<PartAction> PartActions { get; set; }
        public virtual DbSet<PartMetadata> PartMetadatas { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
    
        public virtual ObjectResult<Nullable<int>> spGetNextInstrumentVersion(Nullable<int> instrumentId, Nullable<int> modifiedBy)
        {
            var instrumentIdParameter = instrumentId.HasValue ?
                new ObjectParameter("InstrumentId", instrumentId) :
                new ObjectParameter("InstrumentId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetNextInstrumentVersion", instrumentIdParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetNextItemVersion(Nullable<int> itemId, Nullable<int> modifiedBy)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetNextItemVersion", itemIdParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetNextPartVersion(Nullable<int> partId, Nullable<int> modifiedBy)
        {
            var partIdParameter = partId.HasValue ?
                new ObjectParameter("PartId", partId) :
                new ObjectParameter("PartId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetNextPartVersion", partIdParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<spFetchPartHeirarchy_Result> spFetchPartHeirarchy(Nullable<int> partId, Nullable<int> version)
        {
            var partIdParameter = partId.HasValue ?
                new ObjectParameter("PartId", partId) :
                new ObjectParameter("PartId", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchPartHeirarchy_Result>("spFetchPartHeirarchy", partIdParameter, versionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetNextPartActionVersion(Nullable<int> partActionId, Nullable<int> modifiedBy)
        {
            var partActionIdParameter = partActionId.HasValue ?
                new ObjectParameter("PartActionId", partActionId) :
                new ObjectParameter("PartActionId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetNextPartActionVersion", partActionIdParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetNextDbVersion(Nullable<int> modifiedBy)
        {
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetNextDbVersion", modifiedByParameter);
        }
    
        public virtual ObjectResult<spFetchUsersWithUncommitedChanges_Result> spFetchUsersWithUncommitedChanges(Nullable<int> instrumentId)
        {
            var instrumentIdParameter = instrumentId.HasValue ?
                new ObjectParameter("InstrumentId", instrumentId) :
                new ObjectParameter("InstrumentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchUsersWithUncommitedChanges_Result>("spFetchUsersWithUncommitedChanges", instrumentIdParameter);
        }
    
        public virtual ObjectResult<spFetchUncommittedPartChanges_Result> spFetchUncommittedPartChanges(Nullable<int> instrumentId)
        {
            var instrumentIdParameter = instrumentId.HasValue ?
                new ObjectParameter("InstrumentId", instrumentId) :
                new ObjectParameter("InstrumentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchUncommittedPartChanges_Result>("spFetchUncommittedPartChanges", instrumentIdParameter);
        }
    
        public virtual ObjectResult<spSearchInstrumentParts_Result> spSearchInstrumentParts(Nullable<int> instrumentId, Nullable<int> version, string searchKey)
        {
            var instrumentIdParameter = instrumentId.HasValue ?
                new ObjectParameter("InstrumentId", instrumentId) :
                new ObjectParameter("InstrumentId", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(int));
    
            var searchKeyParameter = searchKey != null ?
                new ObjectParameter("SearchKey", searchKey) :
                new ObjectParameter("SearchKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchInstrumentParts_Result>("spSearchInstrumentParts", instrumentIdParameter, versionParameter, searchKeyParameter);
        }
    
        public virtual ObjectResult<spFetchInstrumentChanges_Result> spFetchInstrumentChanges(Nullable<int> instrumentId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var instrumentIdParameter = instrumentId.HasValue ?
                new ObjectParameter("InstrumentId", instrumentId) :
                new ObjectParameter("InstrumentId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchInstrumentChanges_Result>("spFetchInstrumentChanges", instrumentIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spFetchUncommittedMetadataChanges_Result> spFetchUncommittedMetadataChanges(Nullable<int> instrumentId)
        {
            var instrumentIdParameter = instrumentId.HasValue ?
                new ObjectParameter("InstrumentId", instrumentId) :
                new ObjectParameter("InstrumentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchUncommittedMetadataChanges_Result>("spFetchUncommittedMetadataChanges", instrumentIdParameter);
        }
    }
}
